name: OPAQUE
on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read

jobs:
  lint:
    name: Lint and Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        GOVER: [ '1.18' ]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Go-${{ matrix.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.GOVER }}

      # Linting
      - name: Linting
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          args: --config=./.github/.golangci.yml ./...
          only-new-issues: true

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18'

      # Test
      - name: Run Tests
        run: go test -v ./...

  analyze:
    name: Analyze
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18'

      # Coverage
      - name: Run coverage
        run: make cover

      # Codecov
      - name: Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.out

      # Sonar
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=bytemare_opaque
            -Dsonar.organization=bytemare-github
            -Dsonar.go.coverage.reportPaths=coverage.out
            -Dsonar.sources=.
            -Dsonar.test.exclusions=tests/**
            -Dsonar.tests=tests/
            -Dsonar.verbose=true